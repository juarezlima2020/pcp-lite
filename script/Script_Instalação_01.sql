
SET SQL DIALECT 3;

CREATE TABLE MAQUINA_PRODUCAO (
    ID_MAQ      INTEGER NOT NULL,
    DESCRICAO   VARCHAR(50) NOT NULL,
    VALOR_HORA  NUMERIC(10,5) NOT NULL
);

ALTER TABLE MAQUINA_PRODUCAO ADD CONSTRAINT PK_MAQUINA_PRODUCAO PRIMARY KEY (ID_MAQ);

GRANT ALL ON MAQUINA_PRODUCAO TO FORCA_V;
GRANT ALL ON MAQUINA_PRODUCAO TO MARCELO WITH GRANT OPTION;
GRANT ALL ON MAQUINA_PRODUCAO TO ROLE_ADMIN WITH GRANT OPTION;

CREATE GENERATOR GEN_TPRO;

CREATE TABLE PRODUTO_TIPO (
    ID_TPRO       INTEGER NOT NULL,
    DESCRICAO     VARCHAR(100) NOT NULL,
    CTRL_ESTOQUE  SMALLINT DEFAULT 1 NOT NULL
);

ALTER TABLE PRODUTO_TIPO ADD CONSTRAINT PK_PRODUTO_TIPO PRIMARY KEY (ID_TPRO);

SET TERM ^ ;

CREATE OR ALTER TRIGGER BI_PRODUTO_TIPO_GID FOR PRODUTO_TIPO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.ID_TPRO, 0) = 0) THEN
    NEW.ID_TPRO = GEN_ID(GEN_TPRO,1);
END
^

SET TERM ; ^


GRANT ALL ON PRODUTO_TIPO TO FORCA_V;
GRANT ALL ON PRODUTO_TIPO TO MARCELO WITH GRANT OPTION;
GRANT ALL ON PRODUTO_TIPO TO ROLE_ADMIN WITH GRANT OPTION;


CREATE GENERATOR GEN_ESTP;

CREATE TABLE PRODUTO_ESTRUTURA (
    ID_ESTP     INTEGER NOT NULL,
    ID_PRO      INTEGER NOT NULL,
    ID_PROI     INTEGER NOT NULL,
    QUANTIDADE  NUMERIC(10,5) DEFAULT 0 NOT NULL,
    ID_MAQ      INTEGER
);

ALTER TABLE PRODUTO_ESTRUTURA ADD CONSTRAINT PK_PRODUTO_ESTRUTURA PRIMARY KEY (ID_ESTP);
ALTER TABLE PRODUTO_ESTRUTURA ADD CONSTRAINT FK_PRODUTO_ESTRUTURA_MAQ FOREIGN KEY (ID_MAQ) REFERENCES MAQUINA_PRODUCAO (ID_MAQ) ON DELETE SET NULL ON UPDATE SET NULL;
ALTER TABLE PRODUTO_ESTRUTURA ADD CONSTRAINT FK_PRODUTO_ESTRUTURA_PRO FOREIGN KEY (ID_PRO) REFERENCES PRODUTO (ID_PRO) ON DELETE CASCADE;
ALTER TABLE PRODUTO_ESTRUTURA ADD CONSTRAINT FK_PRODUTO_ESTRUTURA_PROI FOREIGN KEY (ID_PROI) REFERENCES PRODUTO (ID_PRO) ON DELETE CASCADE;

SET TERM ^ ;

CREATE OR ALTER TRIGGER BIU_PRODUTO_ESTRUTURA_MAQ FOR PRODUTO_ESTRUTURA
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
BEGIN
  IF (NEW.ID_MAQ <= 0) THEN
    NEW.ID_MAQ = NULL;
END
^

CREATE OR ALTER TRIGGER BI_PRODUTO_ESTRUTURA_GID FOR PRODUTO_ESTRUTURA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.ID_ESTP, 0) = 0) THEN
    NEW.ID_ESTP = GEN_ID(GEN_ESTP,1);
END
^
SET TERM ; ^

GRANT ALL ON PRODUTO_ESTRUTURA TO FORCA_V;
GRANT ALL ON PRODUTO_ESTRUTURA TO MARCELO WITH GRANT OPTION;
GRANT ALL ON PRODUTO_ESTRUTURA TO ROLE_ADMIN WITH GRANT OPTION;

CREATE GENERATOR GEN_ORDEM;

CREATE TABLE ORDEM_PRODUCAO (
    ID_ORDEM         INTEGER NOT NULL,
    DESCRICAO        VARCHAR(100) NOT NULL,
    ID_EMP           DOM_ID_EMPRESA NOT NULL /* DOM_ID_EMPRESA = BIGINT NOT NULL */,
    DATA_CREATED     TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    DATA_INIC_PREV   TIMESTAMP NOT NULL,
    DATA_FINAL_PREV  TIMESTAMP NOT NULL,
    DATA_INIC_REAL   TIMESTAMP,
    DATA_FINAL_REAL  TIMESTAMP,
    CUSTO_UNIT       NUMERIC(10,5) DEFAULT 0 NOT NULL,
    CUSTO_TOTAL      NUMERIC(10,5) DEFAULT 0 NOT NULL,
    CUSTO_KG         NUMERIC(10,5) DEFAULT 0 NOT NULL,
    STATUS           SMALLINT DEFAULT 0 NOT NULL,
    OBSERVACAO       VARCHAR(500)
);


ALTER TABLE ORDEM_PRODUCAO ADD CONSTRAINT PK_ORDEM_PRODUCAO PRIMARY KEY (ID_ORDEM);
ALTER TABLE ORDEM_PRODUCAO ADD CONSTRAINT FK_ORDEM_PRODUCAO_EMP FOREIGN KEY (ID_EMP) REFERENCES EMPRESA (ID_EMP);

COMMENT ON COLUMN ORDEM_PRODUCAO.STATUS IS 
'0 = EM EDICAO
1 = LIBERADO
2 = EM PRODUCAO
3 = CANCELADO
4 = FINALIZADO';

GRANT ALL ON ORDEM_PRODUCAO TO FORCA_V;
GRANT ALL ON ORDEM_PRODUCAO TO MARCELO WITH GRANT OPTION;
GRANT ALL ON ORDEM_PRODUCAO TO ROLE_ADMIN WITH GRANT OPTION;

CREATE GENERATOR GEN_OITEM;

CREATE TABLE ORDEM_PRODUCAO_ITEM (
    ID_OITEM         INTEGER NOT NULL,
    ID_ORDEM         INTEGER NOT NULL,
    ID_PRO           INTEGER NOT NULL,
    QUANTIDADE       NUMERIC(10,5) DEFAULT 0 NOT NULL,
    LOTE_NUMERO      VARCHAR(20),
    FABRICACAO       DATE,
    VALIDADE         DATE,
    OBSERVACAO       VARCHAR(500),
    DATA_INIC_PREV   TIMESTAMP NOT NULL,
    DATA_FINAL_PREV  TIMESTAMP NOT NULL,
    DATA_INIC_REAL   TIMESTAMP,
    DATA_FINAL_REAL  TIMESTAMP,
    CUSTO_UNIT       NUMERIC(10,5) DEFAULT 0 NOT NULL,
    CUSTO_KG         NUMERIC(10,5) DEFAULT 0 NOT NULL,
    CUSTO_TOTAL      NUMERIC(10,5) DEFAULT 0 NOT NULL,
    STATUS           SMALLINT DEFAULT 0 NOT NULL
);

ALTER TABLE ORDEM_PRODUCAO_ITEM ADD CONSTRAINT PK_ORDEM_PRODUCAO_ITEM PRIMARY KEY (ID_OITEM);
ALTER TABLE ORDEM_PRODUCAO_ITEM ADD CONSTRAINT FK_ORDEM_PRODUCAO_ITEM_ORDER FOREIGN KEY (ID_ORDEM) REFERENCES ORDEM_PRODUCAO (ID_ORDEM);
ALTER TABLE ORDEM_PRODUCAO_ITEM ADD CONSTRAINT FK_ORDEM_PRODUCAO_ITEM_PRO FOREIGN KEY (ID_PRO) REFERENCES PRODUTO (ID_PRO);

SET TERM ^ ;

CREATE OR ALTER TRIGGER AIUD_ORDEM_PRODUCAO_ITEM_SUM FOR ORDEM_PRODUCAO_ITEM
ACTIVE AFTER INSERT OR UPDATE OR DELETE POSITION 0
AS
DECLARE ID_ORDEM    INTEGER;
DECLARE CUSTO_UNIT  NUMERIC(10,5);
DECLARE CUSTO_KG    NUMERIC(10,5);
DECLARE CUSTO_TOTAL NUMERIC(10,5);
BEGIN
  ID_ORDEM = IIF(DELETING, OLD.ID_ORDEM, NEW.ID_ORDEM);
  SELECT COALESCE(SUM(ORDEM_PRODUCAO_ITEM.CUSTO_UNIT), 0),
         COALESCE(SUM(ORDEM_PRODUCAO_ITEM.CUSTO_KG), 0),
         COALESCE(SUM(ORDEM_PRODUCAO_ITEM.CUSTO_TOTAL), 0)
  FROM ORDEM_PRODUCAO_ITEM WHERE ID_ORDEM = :ID_ORDEM
  INTO :CUSTO_UNIT,
       :CUSTO_KG,
       :CUSTO_TOTAL;

  UPDATE ORDEM_PRODUCAO SET ORDEM_PRODUCAO.CUSTO_UNIT  = :CUSTO_UNIT,
                            ORDEM_PRODUCAO.CUSTO_KG    = :CUSTO_KG,
                            ORDEM_PRODUCAO.CUSTO_TOTAL = :CUSTO_TOTAL
  WHERE ORDEM_PRODUCAO.ID_ORDEM = :ID_ORDEM;

END
^


/* Trigger: BIU_ORDEM_PRODUCAO_ITEM_SUM */
CREATE OR ALTER TRIGGER BIU_ORDEM_PRODUCAO_ITEM_SUM FOR ORDEM_PRODUCAO_ITEM
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
BEGIN

  IF ( UPDATING AND NEW.QUANTIDADE = OLD.QUANTIDADE ) THEN
    EXIT;

  SELECT COALESCE(SUM(PRODUTO.PRECO_UNIT*PRODUTO_ESTRUTURA.QUANTIDADE), 0)
         FROM PRODUTO_ESTRUTURA
         JOIN PRODUTO ON (PRODUTO_ESTRUTURA.ID_PROI = PRODUTO.ID_PRO AND PRODUTO_ESTRUTURA.ID_PRO = NEW.ID_PRO)
         INTO NEW.CUSTO_UNIT;

  NEW.CUSTO_TOTAL = COALESCE(NEW.CUSTO_UNIT * NEW.QUANTIDADE, 0);

  SELECT IIF(NEW.CUSTO_UNIT = 0, 1, NEW.CUSTO_UNIT) / PRODUTO.PESO_BRT FROM PRODUTO WHERE PRODUTO.ID_PRO = NEW.ID_PRO INTO NEW.CUSTO_KG;

END
^


/* Trigger: BI_ORDEM_PRODUCAO_ITEM_GID */
CREATE OR ALTER TRIGGER BI_ORDEM_PRODUCAO_ITEM_GID FOR ORDEM_PRODUCAO_ITEM
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.ID_OITEM, 0) = 0) THEN
    NEW.ID_OITEM = GEN_ID(GEN_OITEM,1);
END
^


/* Trigger: BU_ORDEM_PRODUCAO_ITEM_REAL */
CREATE OR ALTER TRIGGER BU_ORDEM_PRODUCAO_ITEM_REAL FOR ORDEM_PRODUCAO_ITEM
ACTIVE BEFORE UPDATE POSITION 1
AS
DECLARE PRODUCTION SMALLINT = 2;
DECLARE FINISHED   SMALLINT = 4;
BEGIN
  -- GRAVA A DATA INICIAL REAL AO COLOCAR EM PRODUCAO, O PRIMEIRO ITEM
  IF (NEW.DATA_INIC_REAL IS DISTINCT FROM OLD.DATA_INIC_REAL AND
     (NOT(EXISTS(SELECT DATA_INIC_REAL FROM ORDEM_PRODUCAO_ITEM
      WHERE DATA_INIC_REAL IS NOT NULL AND ID_ORDEM = NEW.ID_ORDEM AND ID_OITEM <> NEW.ID_OITEM)))) THEN
    UPDATE ORDEM_PRODUCAO SET STATUS = :PRODUCTION WHERE ID_ORDEM = NEW.ID_ORDEM;

  -- GRAVA A DATA TERMINO REAL AO FINALIZAR A PRODUCAO DO ULTIMO ITEM
  IF (NEW.DATA_FINAL_REAL IS DISTINCT FROM OLD.DATA_FINAL_REAL AND
     (NOT(EXISTS(SELECT DATA_FINAL_REAL FROM ORDEM_PRODUCAO_ITEM
      WHERE DATA_FINAL_REAL IS NULL AND ID_ORDEM = NEW.ID_ORDEM AND ID_OITEM <> NEW.ID_OITEM)))) THEN
    UPDATE ORDEM_PRODUCAO SET STATUS = :FINISHED WHERE ID_ORDEM = NEW.ID_ORDEM;
END
^


/* Trigger: BU_ORDEM_PRODUCAO_ITEM_STATUS */
CREATE OR ALTER TRIGGER BU_ORDEM_PRODUCAO_ITEM_STATUS FOR ORDEM_PRODUCAO_ITEM
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE PENDANT  SMALLINT = 0;
DECLARE RELEASED SMALLINT = 1;
DECLARE FINISHED SMALLINT = 2;
BEGIN
  IF (NEW.STATUS = :FINISHED) THEN
    NEW.DATA_FINAL_REAL = CURRENT_TIMESTAMP;

  IF (NEW.STATUS = :RELEASED) THEN
    NEW.DATA_INIC_REAL = CURRENT_TIMESTAMP;

  IF (NEW.STATUS = :PENDANT) THEN BEGIN
    NEW.DATA_INIC_REAL  = NULL;
    NEW.DATA_FINAL_REAL = NULL;
  END
END
^


SET TERM ; ^

COMMENT ON COLUMN ORDEM_PRODUCAO_ITEM.STATUS IS
'0 = PENDENTE
1 = EM PRODUÇÃO
2 = FINALIZADO';

GRANT ALL ON ORDEM_PRODUCAO_ITEM TO FORCA_V;
GRANT ALL ON ORDEM_PRODUCAO_ITEM TO MARCELO WITH GRANT OPTION;
GRANT ALL ON ORDEM_PRODUCAO_ITEM TO ROLE_ADMIN WITH GRANT OPTION;

ALTER TABLE PRODUTO
ADD ID_TPRO INTEGER NOT NULL;
ALTER TABLE PRODUTO ADD CONSTRAINT FK_PRODUTO_TPRO FOREIGN KEY (ID_TPRO) REFERENCES PRODUTO_TIPO (ID_TPRO);

CREATE VIEW VW_ORDEM_PRODUCAO_ITEM(
    ID_OITEM,
    ID_ORDEM,
    ID_PRO,
    QUANTIDADE,
    LOTE_NUMERO,
    FABRICACAO,
    VALIDADE,
    OBSERVACAO,
    DATA_INIC_PREV,
    DATA_FINAL_PREV,
    DATA_INIC_REAL,
    DATA_FINAL_REAL,
    STATUS,
    DESCRICAO,
    CUSTO_UNIT,
    CUSTO_KG,
    CUSTO_TOTAL,
    EMBALAGEM)
AS
SELECT ORDEM_PRODUCAO_ITEM.ID_OITEM,
       ORDEM_PRODUCAO_ITEM.ID_ORDEM,
       ORDEM_PRODUCAO_ITEM.ID_PRO,
       ORDEM_PRODUCAO_ITEM.QUANTIDADE,
       ORDEM_PRODUCAO_ITEM.LOTE_NUMERO,
       ORDEM_PRODUCAO_ITEM.FABRICACAO,
       ORDEM_PRODUCAO_ITEM.VALIDADE,
       ORDEM_PRODUCAO_ITEM.OBSERVACAO,
       ORDEM_PRODUCAO_ITEM.DATA_INIC_PREV,
       ORDEM_PRODUCAO_ITEM.DATA_FINAL_PREV,
       ORDEM_PRODUCAO_ITEM.DATA_INIC_REAL,
       ORDEM_PRODUCAO_ITEM.DATA_FINAL_REAL,
       ORDEM_PRODUCAO_ITEM.STATUS,
       PRODUTO.DESCRICAO,
       ORDEM_PRODUCAO_ITEM.CUSTO_UNIT,
       ORDEM_PRODUCAO_ITEM.CUSTO_KG,
       ORDEM_PRODUCAO_ITEM.CUSTO_TOTAL,
       EMBAL.DESCRICAO
FROM ORDEM_PRODUCAO_ITEM
JOIN PRODUTO ON (ORDEM_PRODUCAO_ITEM.ID_PRO = PRODUTO.ID_PRO)
JOIN EMBAL   ON (EMBAL.ID_EMB               = PRODUTO.ID_EMB)
;

CREATE VIEW VW_PRODUTO_ESTRUTURA(
    ID_ORDEM,
    ID_OITEM,
    ID_EMP,
    ID_PRO,
    DESCRICAO,
    UNIDADE,
    ID_TPRO,
    CTRL_ESTOQUE,
    ESTOQUE,
    QUANTIDADE,
    PRECO_UNIT)
AS
SELECT
ORDEM_PRODUCAO.ID_ORDEM,
ORDEM_PRODUCAO_ITEM.ID_OITEM,
ORDEM_PRODUCAO.ID_EMP,
PRODUTO.ID_PRO,
PRODUTO.DESCRICAO,
EMBAL.DESCRICAO,
PRODUTO.ID_TPRO,
PRODUTO_TIPO.CTRL_ESTOQUE,
ESTOQUE_SALDO.SALDO_DISP ESTOQUE,
PRODUTO_ESTRUTURA.QUANTIDADE * ORDEM_PRODUCAO_ITEM.QUANTIDADE,
PRODUTO.PRECO_UNIT
FROM ORDEM_PRODUCAO_ITEM
JOIN ORDEM_PRODUCAO ON (ORDEM_PRODUCAO_ITEM.ID_ORDEM = ORDEM_PRODUCAO.ID_ORDEM)
JOIN PRODUTO_ESTRUTURA ON (ORDEM_PRODUCAO_ITEM.ID_PRO = PRODUTO_ESTRUTURA.ID_PRO)
JOIN PRODUTO ON (PRODUTO_ESTRUTURA.ID_PROI = PRODUTO.ID_PRO)
JOIN ESTOQUE_SALDO ON (ESTOQUE_SALDO.ID_PRO = PRODUTO.ID_PRO AND ESTOQUE_SALDO.ID_EMP = ORDEM_PRODUCAO.ID_EMP)
JOIN PRODUTO_TIPO ON (PRODUTO_TIPO.ID_TPRO = PRODUTO.ID_TPRO)
JOIN EMBAL ON (EMBAL.ID_EMB = PRODUTO.ID_EMB)
;

SET TERM ^ ;

CREATE OR ALTER TRIGGER AU_ORDEM_PRODUCAO_ESTOQUE FOR ORDEM_PRODUCAO
ACTIVE AFTER UPDATE POSITION 0
AS
DECLARE ENTRADA         SMALLINT = 0;
DECLARE SAIDA           SMALLINT = 1;
DECLARE OPERACAO        SMALLINT;
DECLARE NAT_PRODUCAO    SMALLINT = 7;
DECLARE ID_OITEM        INTEGER;
DECLARE ID_EMP          BIGINT;
DECLARE ID_PRO          INTEGER;
DECLARE QUANTIDADE      NUMERIC(10,5);
DECLARE STATUS_RELEASED SMALLINT = 1;
DECLARE STATUS_FINISHED SMALLINT = 4;
DECLARE STATUS_CANCELED SMALLINT = 3;
DECLARE TRUE            SMALLINT = 1;
BEGIN
  IF (UPDATING AND NEW.STATUS <> OLD.STATUS) THEN BEGIN
    IF ((NEW.STATUS = :STATUS_RELEASED) OR (OLD.STATUS BETWEEN :STATUS_RELEASED AND :STATUS_FINISHED AND NEW.STATUS = :STATUS_CANCELED)) THEN BEGIN

        FOR SELECT VW_PRODUTO_ESTRUTURA.ID_OITEM,
                   VW_PRODUTO_ESTRUTURA.ID_EMP,
                   VW_PRODUTO_ESTRUTURA.ID_PRO,
                   VW_PRODUTO_ESTRUTURA.QUANTIDADE,
                   IIF(NEW.STATUS = :STATUS_RELEASED, :SAIDA,  :ENTRADA)
             FROM  VW_PRODUTO_ESTRUTURA
             JOIN  PRODUTO_TIPO ON (PRODUTO_TIPO.ID_TPRO = VW_PRODUTO_ESTRUTURA.ID_TPRO AND PRODUTO_TIPO.CTRL_ESTOQUE = :TRUE)
             AND   VW_PRODUTO_ESTRUTURA.ID_ORDEM = NEW.ID_ORDEM
            INTO :ID_OITEM,
                  :ID_EMP,
                  :ID_PRO,
                  :QUANTIDADE,
                  :OPERACAO
        DO
          EXECUTE PROCEDURE SP_CTRL_ESTOQUE(:ID_OITEM, :NAT_PRODUCAO, :ID_EMP, :ID_PRO, :QUANTIDADE, CURRENT_DATE, :OPERACAO, NULL);
    END
  END
END
^


/* Trigger: BI_ORDEM_PRODUCAO_GID */
CREATE OR ALTER TRIGGER BI_ORDEM_PRODUCAO_GID FOR ORDEM_PRODUCAO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (COALESCE(NEW.ID_ORDEM, 0) = 0) THEN
    NEW.ID_ORDEM = GEN_ID(GEN_ORDEM,1);
END
^


/* Trigger: BU_ORDEM_PRODUCAO_STATUS */
CREATE OR ALTER TRIGGER BU_ORDEM_PRODUCAO_STATUS FOR ORDEM_PRODUCAO
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE PRODUCTION SMALLINT = 2;
DECLARE FINISHED   SMALLINT = 4;
BEGIN
  IF (NEW.STATUS <> OLD.STATUS AND NEW.STATUS = :PRODUCTION) THEN
    NEW.DATA_INIC_REAL = CURRENT_TIMESTAMP;

  IF (NEW.STATUS <> OLD.STATUS AND NEW.STATUS = :FINISHED) THEN
    NEW.DATA_FINAL_REAL = CURRENT_TIMESTAMP;
END
^


SET TERM ; ^

GRANT SELECT ON PRODUTO_TIPO TO TRIGGER AU_ORDEM_PRODUCAO_ESTOQUE;
GRANT SELECT ON VW_PRODUTO_ESTRUTURA TO TRIGGER AU_ORDEM_PRODUCAO_ESTOQUE;
GRANT EXECUTE ON PROCEDURE SP_CTRL_ESTOQUE TO TRIGGER AU_ORDEM_PRODUCAO_ESTOQUE;